'use strict';

var Q = require('q');
var fs = require('fs');
var qfs = require('./qfs')();

module.exports = function (grunt) {

    var backupConfLocal = function(){
        var deferred = Q.defer();

        qfs.fileExists('/etc/bind/named.conf.local')
        .then(function(){

            grunt.log.write('Backup "/etc/bind/named.conf.local"... ');

            qfs.rename('/etc/bind/named.conf.local', '/etc/bind/named.conf.local.bac')
            .then(function(){
                grunt.log.ok();
                deferred.resolve();
            })
            .fail(function(){
                deferred.reject(response);
                grunt.log.error();                
            });         

        })
        .fail(function(){
            deferred.resolve();
        })

        return deferred.promise;
    };

    var firstSetup = function(){
        console.log('firstSetup')
        backupConfLocal();

        // backup /etc/bind/named.conf.local

        /*
        rm -f /etc/bind/named.conf.local

        touch /etc/bind/named.conf.local
        chown bind:bind /etc/bind/named.conf.local

        echo "// generated by samisdat/ddns" > /etc/bind/named.conf.local


        read_key
        read_configs

        #enable_logging

        # this is needed or *.jnl can not be created
        chown bind:bind /etc/bind

        service bind9 restart
        */
    };

    return{
        backupConfLocal: backupConfLocal,
        firstSetup: firstSetup
    };

};
